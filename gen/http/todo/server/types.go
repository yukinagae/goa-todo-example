// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen todo/design

package server

import (
	todo "todo/gen/todo"
	todoviews "todo/gen/todo/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "todo" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Todo ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Todo task
	Task *string `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// GetResponseBody is the type of the "todo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Todo ID
	ID   string `form:"id" json:"id" xml:"id"`
	Task string `form:"task" json:"task" xml:"task"`
}

// TodoResponseCollection is the type of the "todo" service "list" endpoint
// HTTP response body.
type TodoResponseCollection []*TodoResponse

// TodoResponse is used to define fields on response body types.
type TodoResponse struct {
	// Todo ID
	ID   string `form:"id" json:"id" xml:"id"`
	Task string `form:"task" json:"task" xml:"task"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "todo" service.
func NewGetResponseBody(res *todoviews.TodoView) *GetResponseBody {
	body := &GetResponseBody{
		ID:   *res.ID,
		Task: *res.Task,
	}
	return body
}

// NewTodoResponseCollection builds the HTTP response body from the result of
// the "list" endpoint of the "todo" service.
func NewTodoResponseCollection(res todoviews.TodoCollectionView) TodoResponseCollection {
	body := make([]*TodoResponse, len(res))
	for i, val := range res {
		body[i] = &TodoResponse{
			ID:   *val.ID,
			Task: *val.Task,
		}
	}
	return body
}

// NewGetPayload builds a todo service get endpoint payload.
func NewGetPayload(id string) *todo.GetPayload {
	return &todo.GetPayload{
		ID: id,
	}
}

// NewAddPayload builds a todo service add endpoint payload.
func NewAddPayload(body *AddRequestBody) *todo.AddPayload {
	v := &todo.AddPayload{
		ID:   *body.ID,
		Task: *body.Task,
	}
	return v
}

// NewRemovePayload builds a todo service remove endpoint payload.
func NewRemovePayload(id string) *todo.RemovePayload {
	return &todo.RemovePayload{
		ID: id,
	}
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	return
}
