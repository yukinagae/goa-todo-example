// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo HTTP client types
//
// Command:
// $ goa gen todo/design

package client

import (
	todo "todo/gen/todo"
	todoviews "todo/gen/todo/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "todo" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Todo ID
	ID string `form:"id" json:"id" xml:"id"`
	// Todo task
	Task string `form:"task" json:"task" xml:"task"`
}

// GetResponseBody is the type of the "todo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Todo ID
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Task *string `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// ListResponseBody is the type of the "todo" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TodoResponse

// TodoResponse is used to define fields on response body types.
type TodoResponse struct {
	// Todo ID
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Task *string `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "todo" service.
func NewAddRequestBody(p *todo.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		ID:   p.ID,
		Task: p.Task,
	}
	return body
}

// NewGetTodoOK builds a "todo" service "get" endpoint result from a HTTP "OK"
// response.
func NewGetTodoOK(body *GetResponseBody) *todoviews.TodoView {
	v := &todoviews.TodoView{
		ID:   body.ID,
		Task: body.Task,
	}
	return v
}

// NewListTodoCollectionOK builds a "todo" service "list" endpoint result from
// a HTTP "OK" response.
func NewListTodoCollectionOK(body ListResponseBody) todoviews.TodoCollectionView {
	v := make([]*todoviews.TodoView, len(body))
	for i, val := range body {
		v[i] = &todoviews.TodoView{
			ID:   val.ID,
			Task: val.Task,
		}
	}
	return v
}

// ValidateTodoResponse runs the validations defined on TodoResponse
func ValidateTodoResponse(body *TodoResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	return
}
