// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC client encoders and decoders
//
// Command:
// $ goa gen todo/design

package client

import (
	"context"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
	todoviews "todo/gen/todo/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "todo" service "get"
// endpoint.
func BuildGetFunc(grpccli todopb.TodoClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*todopb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &todopb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to todo get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*todo.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "get", "*todo.GetPayload", v)
	}
	return NewGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the todo get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*todopb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "get", "*todopb.GetResponse", v)
	}
	res := NewGetResult(message)
	vres := &todoviews.Todo{Projected: res, View: view}
	if err := todoviews.ValidateTodo(vres); err != nil {
		return nil, err
	}
	return todo.NewTodo(vres), nil
}

// BuildListFunc builds the remote method to invoke for "todo" service "list"
// endpoint.
func BuildListFunc(grpccli todopb.TodoClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*todopb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &todopb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the todo list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*todopb.TodoCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "list", "*todopb.TodoCollection", v)
	}
	res := NewListResult(message)
	vres := todoviews.TodoCollection{Projected: res, View: view}
	if err := todoviews.ValidateTodoCollection(vres); err != nil {
		return nil, err
	}
	return todo.NewTodoCollection(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "todo" service "add"
// endpoint.
func BuildAddFunc(grpccli todopb.TodoClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*todopb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &todopb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to todo add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*todo.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "add", "*todo.AddPayload", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the todo add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*todopb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "add", "*todopb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "todo" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli todopb.TodoClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*todopb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &todopb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to todo remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*todo.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "remove", "*todo.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}
