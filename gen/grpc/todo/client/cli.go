// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC client CLI support package
//
// Command:
// $ goa gen todo/design

package client

import (
	"encoding/json"
	"fmt"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
)

// BuildGetPayload builds the payload for the todo get endpoint from CLI flags.
func BuildGetPayload(todoGetMessage string) (*todo.GetPayload, error) {
	var err error
	var message todopb.GetRequest
	{
		if todoGetMessage != "" {
			err = json.Unmarshal([]byte(todoGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Voluptatum molestias assumenda.\"\n   }'")
			}
		}
	}
	v := &todo.GetPayload{
		ID: message.Id,
	}
	return v, nil
}

// BuildAddPayload builds the payload for the todo add endpoint from CLI flags.
func BuildAddPayload(todoAddMessage string) (*todo.AddPayload, error) {
	var err error
	var message todopb.AddRequest
	{
		if todoAddMessage != "" {
			err = json.Unmarshal([]byte(todoAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Quia rerum enim cupiditate eaque nihil dolore.\",\n      \"task\": \"Odit enim nisi.\"\n   }'")
			}
		}
	}
	v := &todo.AddPayload{
		ID:   message.Id,
		Task: message.Task,
	}
	return v, nil
}

// BuildRemovePayload builds the payload for the todo remove endpoint from CLI
// flags.
func BuildRemovePayload(todoRemoveMessage string) (*todo.RemovePayload, error) {
	var err error
	var message todopb.RemoveRequest
	{
		if todoRemoveMessage != "" {
			err = json.Unmarshal([]byte(todoRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Dolore voluptatum est voluptatibus cum.\"\n   }'")
			}
		}
	}
	v := &todo.RemovePayload{
		ID: message.Id,
	}
	return v, nil
}
