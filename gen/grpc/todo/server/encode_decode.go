// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC server encoders and decoders
//
// Command:
// $ goa gen todo/design

package server

import (
	"context"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
	todoviews "todo/gen/todo/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetResponse encodes responses from the "todo" service "get" endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*todoviews.Todo)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "get", "*todoviews.Todo", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "todo" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *todopb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "get", "*todopb.GetRequest", v)
		}
	}
	var payload *todo.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeListResponse encodes responses from the "todo" service "list" endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(todoviews.TodoCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "list", "todoviews.TodoCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewTodoCollection(result)
	return resp, nil
}

// EncodeAddResponse encodes responses from the "todo" service "add" endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "add", "string", v)
	}
	resp := NewAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "todo" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *todopb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "add", "*todopb.AddRequest", v)
		}
	}
	var payload *todo.AddPayload
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeRemoveResponse encodes responses from the "todo" service "remove"
// endpoint.
func EncodeRemoveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewRemoveResponse()
	return resp, nil
}

// DecodeRemoveRequest decodes requests sent to "todo" service "remove"
// endpoint.
func DecodeRemoveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *todopb.RemoveRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.RemoveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "remove", "*todopb.RemoveRequest", v)
		}
	}
	var payload *todo.RemovePayload
	{
		payload = NewRemovePayload(message)
	}
	return payload, nil
}
