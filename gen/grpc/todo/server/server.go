// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC server
//
// Command:
// $ goa gen todo/design

package server

import (
	"context"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the todopb.TodoServer interface.
type Server struct {
	GetH    goagrpc.UnaryHandler
	ListH   goagrpc.UnaryHandler
	AddH    goagrpc.UnaryHandler
	RemoveH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the todo service endpoints.
func New(e *todo.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetH:    NewGetHandler(e.Get, uh),
		ListH:   NewListHandler(e.List, uh),
		AddH:    NewAddHandler(e.Add, uh),
		RemoveH: NewRemoveHandler(e.Remove, uh),
	}
}

// NewGetHandler creates a gRPC handler which serves the "todo" service "get"
// endpoint.
func NewGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetRequest, EncodeGetResponse)
	}
	return h
}

// Get implements the "Get" method in todopb.TodoServer interface.
func (s *Server) Get(ctx context.Context, message *todopb.GetRequest) (*todopb.GetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get")
	ctx = context.WithValue(ctx, goa.ServiceKey, "todo")
	resp, err := s.GetH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*todopb.GetResponse), nil
}

// NewListHandler creates a gRPC handler which serves the "todo" service "list"
// endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in todopb.TodoServer interface.
func (s *Server) List(ctx context.Context, message *todopb.ListRequest) (*todopb.TodoCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "list")
	ctx = context.WithValue(ctx, goa.ServiceKey, "todo")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*todopb.TodoCollection), nil
}

// NewAddHandler creates a gRPC handler which serves the "todo" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in todopb.TodoServer interface.
func (s *Server) Add(ctx context.Context, message *todopb.AddRequest) (*todopb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "todo")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*todopb.AddResponse), nil
}

// NewRemoveHandler creates a gRPC handler which serves the "todo" service
// "remove" endpoint.
func NewRemoveHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRemoveRequest, EncodeRemoveResponse)
	}
	return h
}

// Remove implements the "Remove" method in todopb.TodoServer interface.
func (s *Server) Remove(ctx context.Context, message *todopb.RemoveRequest) (*todopb.RemoveResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "remove")
	ctx = context.WithValue(ctx, goa.ServiceKey, "todo")
	resp, err := s.RemoveH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*todopb.RemoveResponse), nil
}
