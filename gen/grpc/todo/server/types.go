// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC server types
//
// Command:
// $ goa gen todo/design

package server

import (
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
	todoviews "todo/gen/todo/views"
)

// NewGetPayload builds the payload of the "get" endpoint of the "todo" service
// from the gRPC request type.
func NewGetPayload(message *todopb.GetRequest) *todo.GetPayload {
	v := &todo.GetPayload{
		ID: message.Id,
	}
	return v
}

// NewGetResponse builds the gRPC response type from the result of the "get"
// endpoint of the "todo" service.
func NewGetResponse(result *todoviews.TodoView) *todopb.GetResponse {
	message := &todopb.GetResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Task != nil {
		message.Task = *result.Task
	}
	return message
}

// NewTodoCollection builds the gRPC response type from the result of the
// "list" endpoint of the "todo" service.
func NewTodoCollection(result todoviews.TodoCollectionView) *todopb.TodoCollection {
	message := &todopb.TodoCollection{}
	message.Field = make([]*todopb.Todo1, len(result))
	for i, val := range result {
		message.Field[i] = &todopb.Todo1{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Task != nil {
			message.Field[i].Task = *val.Task
		}
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "todo" service
// from the gRPC request type.
func NewAddPayload(message *todopb.AddRequest) *todo.AddPayload {
	v := &todo.AddPayload{
		ID:   message.Id,
		Task: message.Task,
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "todo" service.
func NewAddResponse(result string) *todopb.AddResponse {
	message := &todopb.AddResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "todo"
// service from the gRPC request type.
func NewRemovePayload(message *todopb.RemoveRequest) *todo.RemovePayload {
	v := &todo.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "todo" service.
func NewRemoveResponse() *todopb.RemoveResponse {
	message := &todopb.RemoveResponse{}
	return message
}
