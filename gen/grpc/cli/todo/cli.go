// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo gRPC client CLI support package
//
// Command:
// $ goa gen todo/design

package cli

import (
	"flag"
	"fmt"
	"os"
	todoc "todo/gen/grpc/todo/client"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `todo (get|list|add|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` todo get --message '{
      "id": "Voluptatum molestias assumenda."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		todoFlags = flag.NewFlagSet("todo", flag.ContinueOnError)

		todoGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		todoGetMessageFlag = todoGetFlags.String("message", "", "")

		todoListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		todoAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		todoAddMessageFlag = todoAddFlags.String("message", "", "")

		todoRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		todoRemoveMessageFlag = todoRemoveFlags.String("message", "", "")
	)
	todoFlags.Usage = todoUsage
	todoGetFlags.Usage = todoGetUsage
	todoListFlags.Usage = todoListUsage
	todoAddFlags.Usage = todoAddUsage
	todoRemoveFlags.Usage = todoRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "todo":
			svcf = todoFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "todo":
			switch epn {
			case "get":
				epf = todoGetFlags

			case "list":
				epf = todoListFlags

			case "add":
				epf = todoAddFlags

			case "remove":
				epf = todoRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "todo":
			c := todoc.NewClient(cc, opts...)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = todoc.BuildGetPayload(*todoGetMessageFlag)
			case "list":
				endpoint = c.List()
				data = nil
			case "add":
				endpoint = c.Add()
				data, err = todoc.BuildAddPayload(*todoAddMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = todoc.BuildRemovePayload(*todoRemoveMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// todoUsage displays the usage of the todo command and its subcommands.
func todoUsage() {
	fmt.Fprintf(os.Stderr, `Service is the todo service interface.
Usage:
    %s [globalflags] todo COMMAND [flags]

COMMAND:
    get: Get implements get.
    list: List implements list.
    add: Add implements add.
    remove: Remove implements remove.

Additional help:
    %s todo COMMAND --help
`, os.Args[0], os.Args[0])
}
func todoGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] todo get -message JSON

Get implements get.
    -message JSON: 

Example:
    `+os.Args[0]+` todo get --message '{
      "id": "Voluptatum molestias assumenda."
   }'
`, os.Args[0])
}

func todoListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] todo list

List implements list.

Example:
    `+os.Args[0]+` todo list
`, os.Args[0])
}

func todoAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] todo add -message JSON

Add implements add.
    -message JSON: 

Example:
    `+os.Args[0]+` todo add --message '{
      "id": "Quia rerum enim cupiditate eaque nihil dolore.",
      "task": "Odit enim nisi."
   }'
`, os.Args[0])
}

func todoRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] todo remove -message JSON

Remove implements remove.
    -message JSON: 

Example:
    `+os.Args[0]+` todo remove --message '{
      "id": "Dolore voluptatum est voluptatibus cum."
   }'
`, os.Args[0])
}
