// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo service
//
// Command:
// $ goa gen todo/design

package todo

import (
	"context"
	todoviews "todo/gen/todo/views"
)

// Service is the todo service interface.
type Service interface {
	// Get implements get.
	Get(context.Context, *GetPayload) (res *Todo, err error)
	// List implements list.
	List(context.Context) (res TodoCollection, err error)
	// Add implements add.
	Add(context.Context, *AddPayload) (res string, err error)
	// Remove implements remove.
	Remove(context.Context, *RemovePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "todo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"get", "list", "add", "remove"}

// GetPayload is the payload type of the todo service get method.
type GetPayload struct {
	// Todo ID
	ID string
}

// Todo is the result type of the todo service get method.
type Todo struct {
	// Todo ID
	ID   string
	Task string
}

// TodoCollection is the result type of the todo service list method.
type TodoCollection []*Todo

// AddPayload is the payload type of the todo service add method.
type AddPayload struct {
	// Todo ID
	ID string
	// Todo task
	Task string
}

// RemovePayload is the payload type of the todo service remove method.
type RemovePayload struct {
	// Todo ID
	ID string
}

// NotFound is the type returned when attempting to show or delete a todo that
// does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing Todo
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a todo that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewTodo initializes result type Todo from viewed result type Todo.
func NewTodo(vres *todoviews.Todo) *Todo {
	var res *Todo
	switch vres.View {
	case "default", "":
		res = newTodo(vres.Projected)
	}
	return res
}

// NewViewedTodo initializes viewed result type Todo from result type Todo
// using the given view.
func NewViewedTodo(res *Todo, view string) *todoviews.Todo {
	var vres *todoviews.Todo
	switch view {
	case "default", "":
		p := newTodoView(res)
		vres = &todoviews.Todo{p, "default"}
	}
	return vres
}

// NewTodoCollection initializes result type TodoCollection from viewed result
// type TodoCollection.
func NewTodoCollection(vres todoviews.TodoCollection) TodoCollection {
	var res TodoCollection
	switch vres.View {
	case "default", "":
		res = newTodoCollection(vres.Projected)
	}
	return res
}

// NewViewedTodoCollection initializes viewed result type TodoCollection from
// result type TodoCollection using the given view.
func NewViewedTodoCollection(res TodoCollection, view string) todoviews.TodoCollection {
	var vres todoviews.TodoCollection
	switch view {
	case "default", "":
		p := newTodoCollectionView(res)
		vres = todoviews.TodoCollection{p, "default"}
	}
	return vres
}

// newTodo converts projected type Todo to service type Todo.
func newTodo(vres *todoviews.TodoView) *Todo {
	res := &Todo{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Task != nil {
		res.Task = *vres.Task
	}
	return res
}

// newTodoView projects result type Todo to projected type TodoView using the
// "default" view.
func newTodoView(res *Todo) *todoviews.TodoView {
	vres := &todoviews.TodoView{
		ID:   &res.ID,
		Task: &res.Task,
	}
	return vres
}

// newTodoCollection converts projected type TodoCollection to service type
// TodoCollection.
func newTodoCollection(vres todoviews.TodoCollectionView) TodoCollection {
	res := make(TodoCollection, len(vres))
	for i, n := range vres {
		res[i] = newTodo(n)
	}
	return res
}

// newTodoCollectionView projects result type TodoCollection to projected type
// TodoCollectionView using the "default" view.
func newTodoCollectionView(res TodoCollection) todoviews.TodoCollectionView {
	vres := make(todoviews.TodoCollectionView, len(res))
	for i, n := range res {
		vres[i] = newTodoView(n)
	}
	return vres
}
