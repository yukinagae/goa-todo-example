// Code generated by goa v3.0.4, DO NOT EDIT.
//
// todo views
//
// Command:
// $ goa gen todo/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Todo is the viewed result type that is projected based on a view.
type Todo struct {
	// Type to project
	Projected *TodoView
	// View to render
	View string
}

// TodoCollection is the viewed result type that is projected based on a view.
type TodoCollection struct {
	// Type to project
	Projected TodoCollectionView
	// View to render
	View string
}

// TodoView is a type that runs validations on a projected type.
type TodoView struct {
	// Todo ID
	ID   *string
	Task *string
}

// TodoCollectionView is a type that runs validations on a projected type.
type TodoCollectionView []*TodoView

var (
	// TodoMap is a map of attribute names in result type Todo indexed by view name.
	TodoMap = map[string][]string{
		"default": []string{
			"id",
			"task",
		},
	}
	// TodoCollectionMap is a map of attribute names in result type TodoCollection
	// indexed by view name.
	TodoCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"task",
		},
	}
)

// ValidateTodo runs the validations defined on the viewed result type Todo.
func ValidateTodo(result *Todo) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTodoView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTodoCollection runs the validations defined on the viewed result
// type TodoCollection.
func ValidateTodoCollection(result TodoCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTodoCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTodoView runs the validations defined on TodoView using the
// "default" view.
func ValidateTodoView(result *TodoView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "result"))
	}
	return
}

// ValidateTodoCollectionView runs the validations defined on
// TodoCollectionView using the "default" view.
func ValidateTodoCollectionView(result TodoCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTodoView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
